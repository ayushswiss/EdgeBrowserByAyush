//enums
const RegistrationCategory = Object.freeze({PRESENCE:"Presence", CTI:"CTI"});
const LineForwardType = Object.freeze({CFA:1, CFB:2, CFNA:3});
const StartRecordingTone = Object.freeze({NotPlayed:1, PlayedToCaller:2, PlayedToCalled:3, PlayedToBoth:4});
const Result = Object.freeze({OK:"OK", NOTOK:"NOK", NOT_SUPPORTED:"NOT SUPPORTED"});
const CallConnectionState = Object.freeze({ACCEPTED:"ACCEPTED", RINGBACK:"RINGBACK", DIALTONE:"DIALTONE", CONNECTED:"CONNECTED", CONFERENCED:"CONFERENCED", ONHOLD:"ONHOLD", ESTABLISHED:"ESTABLISHED", DISCONNECTED:"DISCONNECTED", IDLE:"IDLE", OFFERING:"OFFERING", BUSY:"BUSY", DIALING:"DIALING", PROCEEDING:"PROCEEDING", UNKNOWN:"UNKNOWN", ONHOLDPENDCONF:"ONHOLDPENDCONF", ONHOLDPENDTRANSFER:"ONHOLDPENDTRANSFER"});
const CallDirection = Object.freeze({UNDEFINED:"UNDEFINED", INBOUND:"INBOUND", OUTBOUND:"OUTBOUND"});
const CallRecordingState = Object.freeze({ACTIVE:"ACTIVE", INACTIVE:"INACTIVE"});
const CallMonitoringState = Object.freeze({NoMonitoring:0, SilentMonitoring:1, Coaching:2});
const LineState = Object.freeze({IN_SERVICE:"IN_SERVICE", OUT_OF_SERVICE:"OUT_OF_SERVICE"});
const LineRecordingType = Object.freeze({AUTOMATIC:"AUTOMATIC", MANUAL:"MANUAL", NONE:"NONE"});
const PresenceState = Object.freeze({AVAILABLE:"AVAILABLE", BUSY:"BUSY", AWAY:"AWAY", DND:"DND", UNAVAILABLE:"UNAVAILABLE", VACATION:"VACATION"});
const PresenceStateExchange = Object.freeze({TENTATIVE:"TENTATIVE", BUSY:"BUSY", AWAY:"AWAY"});
const TerminalState = Object.freeze({IN_SERVICE:"IN_SERVICE", OUT_OF_SERVICE:"OUT_OF_SERVICE"});
const HoldAction = Object.freeze({HOLD:"HOLD", UNHOLD:"UNHOLD"});
	
function CocProxyWebSocket() {
	
  this.websocket = null;
	this.messageId = 0;
	this.parser = new DOMParser();
	var self = this;
	
	// Notifications to be overwritten by app
	this.notifyCallStateChanged = function(userId, lineId, terminalId, callId, remoteNumber, remoteName, connectionState, callDirection, time, cause, recordingState, monitoringState) {};
	this.notifyLineStateChanged = function(userId, lineId, terminalId, state, recordingType, forwardDestination, forwardType) {};
	this.notifyPresenceState = function(userId, presenceState, presenceStateText, exchangeInfo) {}; //handle exchange info
	this.notifyTerminalStateChanged = function(userId, terminalId, state) {};
	this.notifyMessageReceived = function(senderUserId, receiverUserId, category, message) {};
	
	// Responses to be overwritten by app
	this.registerResponse = function(messageId, userList) {};
	this.unregisterResponse = function(messageId, userList) {};
	this.lineForwardResponse = function(messageId, result) {};
	this.makeCallResponse = function(messageId, callId, result) {};
	this.answerCallResponse = function(messageId, result) {};
	this.dropCallResponse = function(messageId, result){};
	this.directTransferResponse = function(messageId, result){};
	this.setupTransferResponse = function(messageId, consultationCallId, result){};
	this.completeTransferResponse = function(messageId, result){};
	this.pickupResponse = function(messageId, callId, result){};
	this.startRecordingResponse = function(messageId, callId, result){};
	this.stopRecordingResponse = function(messageId, result){};
	this.setPresenceStateResponse = function(messageId, result){};
	this.holdCallResponse = function(messageId, result){};
	this.sendMessageResponse = function(messageId, result){};
	
	// need to be redefined in each app
	this.onOpen = function(evt) {
	};

	this.onClose = function(evt) {
	};
	
	this.onError = function(evt) {
		//alert("Error: " + evt.data);
	};

	this.onMessage = function(evt) {
		// handle message and call respective notifyXxx
		var rawDara = evt.data;
		var messageBuffer = self.parser.parseFromString(rawDara, "text/xml");
		var l_notifications = messageBuffer.getElementsByTagName("Notification");
		if (l_notifications.length!=0) {
			self.processNotificatios(l_notifications);
		}	else {
			var l_response = messageBuffer.getElementsByTagName("Response");
			self.processResponces(l_response);
		}		
	};
	
	this.processResponces = function(responce) {
		messageNode = responce[0].childNodes[0];
		switch(messageNode.nodeName) {
			case "Register":
				//make object later!!!
				// users : [
				// 	{ 
				//		id,
				// 		categories [{category,result}, {category,result}, ...]
				//	},...
				// ]
				var users = [];
				var userNodes = messageNode.getElementsByTagName("User");
				for (var i=0; i < userNodes.length; i++) {
					var categoriesList = new Categories();
					for (var j=1; j < userNodes[i].childNodes.length; j++) {
						if (userNodes[i].childNodes[j].nodeName == "CustomMessage")
							categoriesList.add(userNodes[i].childNodes[j].attributes[0].nodeValue, userNodes[i].childNodes[j].textContent);
						else
							categoriesList.add(userNodes[i].childNodes[j].nodeName, userNodes[i].childNodes[j].textContent);
					}
					users.push(new User(userNodes[i].childNodes[0].textContent, categoriesList));
				}
				this.registerResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, users);
				break;
			case "Unregister":
				var users = [];
				var userNodes = messageNode.getElementsByTagName("User");
				for (var i=0; i < userNodes.length; i++) {
					var categoriesList = new Categories();
					for (var j=1; j < userNodes[i].childNodes.length; j++)
						categoriesList.add(userNodes[i].childNodes[j].nodeName, userNodes[i].childNodes[j].textContent);
					users.push(new User(userNodes[i].childNodes[0].textContent, categoriesList));
				}
				this.unregisterResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, users);
				break;
			case "LineForward":
				this.lineForwardResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "MakeCall":
				this.makeCallResponse(messageNode.getElementsByTagName("MessageId")[0].textContent,
					messageNode.getElementsByTagName("CallId")[0].textContent,
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "AnswerCall":
				this.answerCallResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "DropCall":
				this.dropCallResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "DirectTransfer":
				this.directTransferResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "SetupTransfer":
				this.setupTransferResponse(messageNode.getElementsByTagName("MessageId")[0].textContent,
					messageNode.getElementsByTagName("ConsultationCallId")[0].textContent,
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "CompleteTransfer":
				this.completeTransferResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "Pickup":
				this.pickupResponse(messageNode.getElementsByTagName("MessageId")[0].textContent,
					messageNode.getElementsByTagName("CallId")[0].textContent,
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "StartRecording":
				this.startRecordingResponse(messageNode.getElementsByTagName("MessageId")[0].textContent,
					messageNode.getElementsByTagName("CallId")[0].textContent,
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "StopRecording":
				this.stopRecordingResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "SetPresenceState":
				this.setPresenceStateResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "HoldCall":
				this.holdCallResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
			case "SendCustomMessage":
				this.sendMessageResponse(messageNode.getElementsByTagName("MessageId")[0].textContent, 
					messageNode.getElementsByTagName("Result")[0].textContent);
				break;
		}
	}
	
	this.processNotificatios = function(notificatons) {
		for (var i=0; i < notificatons.length; i++ ) {
			messageNode = notificatons[i].childNodes[0];
			switch(messageNode.nodeName) {
				case "CallStateChanged":
					this.notifyCallStateChanged(messageNode.getElementsByTagName("UserId")[0].textContent, 
						messageNode.getElementsByTagName("LineId")[0].textContent, 
						messageNode.getElementsByTagName("TerminalId")[0].textContent, 
						messageNode.getElementsByTagName("CallId")[0].textContent, 
						messageNode.getElementsByTagName("RemoteNumber")[0].textContent, 
						messageNode.getElementsByTagName("RemoteName")[0].textContent, 
						messageNode.getElementsByTagName("ConnectionState")[0].textContent, 
						messageNode.getElementsByTagName("CallDirection")[0].textContent, 
						messageNode.getElementsByTagName("Time")[0].textContent, 
						messageNode.getElementsByTagName("Cause")[0].textContent, 
						messageNode.getElementsByTagName("RecordingState")[0].textContent, 
						messageNode.getElementsByTagName("MonitoringState")[0].textContent);
					break;
				case "LineStateChanged":
					this.notifyLineStateChanged(messageNode.getElementsByTagName("UserId")[0].textContent, 
						messageNode.getElementsByTagName("LineId")[0].textContent, 
						messageNode.getElementsByTagName("TerminalId")[0].textContent, 
						messageNode.getElementsByTagName("State")[0].textContent, 
						messageNode.getElementsByTagName("RecordingType")[0].textContent,
						messageNode.getElementsByTagName("ForwardingDestination")[0].textContent,
						messageNode.getElementsByTagName("ForwardingType")[0].textContent);
					break;
				case "PresenceState":
					this.notifyPresenceState(messageNode.getElementsByTagName("UserId")[0].textContent, 
						messageNode.getElementsByTagName("PresenceState")[0].textContent, 
						messageNode.getElementsByTagName("PresenceStateText")[0].textContent, 
						messageNode.getElementsByTagName("ExchangeInfo")[0].textContent);
					break;
				case "TerminalStateChanged":
					this.notifyTerminalStateChanged(messageNode.getElementsByTagName("UserId")[0].textContent, 
						messageNode.getElementsByTagName("TerminalId")[0].textContent, 
						messageNode.getElementsByTagName("State")[0].textContent);
					break;
				case "CustomMessage":
					var l_receiver = "";
					if (messageNode.getElementsByTagName("ReceiverUserId").length > 0)
						l_receiver = messageNode.getElementsByTagName("ReceiverUserId")[0].textContent;
					this.notifyMessageReceived(messageNode.getElementsByTagName("SenderUserId")[0].textContent, 
						l_receiver, 
						messageNode.getElementsByTagName("Category")[0].textContent,
						messageNode.getElementsByTagName("Message")[0].innerHTML);
					break;
			}
		}
	}

	// Open the connection
	this.open = function(ip, secure, key, hash) {
		var url = secure ? 'wss' : 'ws';
		var port = secure  ? ':27864' : ':27866';
		url += '://' + ip + port + "?key="+key+"&hash="+hash; // and the key/has params
		this.websocket = new WebSocket(url);
		this.websocket.onopen = this.onOpen ;
		this.websocket.onclose = this.onClose;
		this.websocket.onmessage = this.onMessage;
		this.websocket.onerror = this.onError;
	};
	
	//close the connection
	this.close = function() {
		this.websocket.close();
	}
	
	//Create Message
	this.getMessage = function(messageName, attr) {
		var XMLMessage = '<ProxyWSMessage>';
		XMLMessage += '<Request>';
		XMLMessage += '<'+messageName+'>';
		XMLMessage += '<MessageId>'+this.messageId+'</MessageId>';
		switch(messageName) {
			case "MakeCall":
				XMLMessage += this.getMakeCall(attr);
				break;
			case "Register":
			case "Unregister":
				XMLMessage += this.getRegUnreg(attr);
				break;
			case "LineForward":
				XMLMessage += this.getLineForward(attr);
				break;
			case "AnswerCall":
				XMLMessage += this.getAnswerCall(attr);
				break;
			case "DropCall":
				XMLMessage += this.getDropCall(attr);
				break;
			case "DirectTransfer":
				XMLMessage += this.getDirectTransfer(attr);
				break;
			case "SetupTransfer":
				XMLMessage += this.getSetupTransfer(attr);
				break;
			case "CompleteTransfer":
				XMLMessage += this.getCompleteTransfer(attr);
				break;
			case "Pickup":
				XMLMessage += this.getPickup(attr);
				break;
			case "StartRecording":
				XMLMessage += this.getStartRecording(attr);
				break;
			case "StopRecording":
				XMLMessage += this.getStopRecording(attr);
				break;
			case "SetPresenceState":
				XMLMessage += this.getSetPresence(attr);
				break;
			case "HoldCall":
				XMLMessage += this.getHoldCall(attr);
				break;
			case "SendCustomMessage":
				XMLMessage += this.getCustomMessage(attr);
				break;
		}
		XMLMessage += '</'+messageName+'>';
		XMLMessage += '</Request>';
		XMLMessage += '</ProxyWSMessage>';
		return XMLMessage;
	};
	
	// --- Requests to the proxy --- //
	
	this.registerRequest = function(userList)	{
		this.messageId++;
		this.websocket.send(this.getMessage("Register",{users:userList}));
		return this.messageId;
	};
	
	this.unregisterRequest = function(userList)	{
		this.messageId++;
		this.websocket.send(this.getMessage("Unregister",{users:userList}));
		return this.messageId;
	};
	
	this.lineForwardRequest = function(line, dest, forwardType)	{
		this.messageId++;
		this.websocket.send(this.getMessage("LineForward",{lineId:line, destination:dest, type:forwardType}));
		return this.messageId;
	};
	
	this.makeCallRequest = function(terminal, line, dest)	{
		this.messageId++;
		this.websocket.send(this.getMessage("MakeCall",{terminalId:terminal, lineId:line, destination:dest}));
		return this.messageId;
	};
	
	this.answerCallRequest = function(call, terminal)	{
		this.messageId++;
		this.websocket.send(this.getMessage("AnswerCall",{callId:call, terminalId:terminal}));
		return this.messageId;
	};
	
	this.dropCallRequest = function(call)	{
		this.messageId++;
		this.websocket.send(this.getMessage("DropCall",{callId:call}));
		return this.messageId;
	};
	
	this.directTransferRequest = function(call, dest, terminal)	{
		this.messageId++;
		this.websocket.send(this.getMessage("DirectTransfer",{callId:call, destination:dest, terminalId:terminal}));
		return this.messageId;
	};
	
	this.setupTransferRequest = function(call, dest, terminal)	{
		this.messageId++;
		this.websocket.send(this.getMessage("SetupTransfer",{callId:call, destination:dest, terminalId:terminal}));
		return this.messageId;
	};
	
	this.completeTransferRequest = function(consultation, call)	{
		this.messageId++;
		this.websocket.send(this.getMessage("CompleteTransfer",{consultationCallId: consultation, callId:call}));
		return this.messageId;
	};
	
	this.pickupRequest = function(call, dest, terminal)	{
		this.messageId++;
		this.websocket.send(this.getMessage("Pickup",{callId:call, terminalId:terminal, destination:dest}));
		return this.messageId;
	};

	this.startRecordingRequest = function(call, tone)	{
		this.messageId++;
		this.websocket.send(this.getMessage("StartRecording",{callId:call, toneOption:tone}));
		return this.messageId;
	};
	
	this.stopRecordingRequest = function(call) {
		this.messageId++;
		this.websocket.send(this.getMessage("StopRecording",{callId:call}));
		return this.messageId;
	};
	
	this.setPresenceStateRequest = function(user, state, stateText) {
		this.messageId++;
		this.websocket.send(this.getMessage("SetPresenceState",{userId:user, presenceState:state, presenceStateText:stateText}));
		return this.messageId;
	};
	
	this.holdCallRequest = function(call, operation, terminal) {
		this.messageId++;
		this.websocket.send(this.getMessage("HoldCall",{callId:call, action:operation, terminalId:terminal}));
		return this.messageId;
	};
	
	this.sendMessageRequest = function(senderId, receiverId, myCategory, customMessage) {
		this.messageId++;
		this.websocket.send(this.getMessage("SendCustomMessage",{senderUserId:senderId, receiverUserId:receiverId, category:myCategory, message:customMessage}));
		return this.messageId;
	};
	
	// --- get child nodes --- //
	
	// users : [
	// 	{ 
	//		id,
	// 		categories [{category,result}, {category,result}, ...]
	//	},...
	// ]
	this.getRegUnreg = function(attr) {
		var registerNodes = "";
		for (var i=0; i < attr.users.length; i++) {
			registerNodes += "<User>";
			registerNodes += "<Id>"+attr.users[i].id+"</Id>";
			for (var j=0; j < attr.users[i].categories.length; j++)
				registerNodes += "<"+attr.users[i].categories[j].category+">" + attr.users[i].categories[j].result + "</"+attr.users[i].categories[j].category+">";
			registerNodes += "</User>";
		}
		return registerNodes;
	};
	
	this.getLineForward = function(attr) {
		var lineForwardNodes = "<LineId>"+attr.lineId+"</LineId>";
		lineForwardNodes += "<Destination>"+attr.destination+"</Destination>";
		lineForwardNodes += "<Type>"+attr.type+"</Type>";
		return lineForwardNodes;
	};
	
	this.getMakeCall = function(attr) {
		makeCallNodes = "<TerminalId>"+attr.terminalId+"</TerminalId>";
		makeCallNodes += "<LineId>"+attr.lineId+"</LineId>";
		makeCallNodes += "<Destination>"+attr.destination+"</Destination>";
		return makeCallNodes;
	};
	
	this.getAnswerCall = function(attr) {
		answerCallNodes = "<CallId>"+attr.callId+"</CallId>";
		answerCallNodes += "<TerminalId>"+attr.terminalId+"</TerminalId>";
		return answerCallNodes;
	};
	
	this.getDropCall = function(attr) {
		dropCallNodes = "<CallId>"+attr.callId+"</CallId>";
		return dropCallNodes;
	};
	
	this.getDirectTransfer = function(attr) {
		directTransferNodes = "<CallId>"+attr.callId+"</CallId>";
		directTransferNodes += "<Destination>"+attr.destination+"</Destination>";
		directTransferNodes += "<TerminalId>"+attr.terminalId+"</TerminalId>";
		return directTransferNodes;
	};
	
	this.getSetupTransfer = function(attr) {
		setupTransferNodes = "<CallId>"+attr.callId+"</CallId>";
		setupTransferNodes += "<Destination>"+attr.destination+"</Destination>";
		setupTransferNodes += "<TerminalId>"+attr.terminalId+"</TerminalId>";
		return setupTransferNodes;
	};
	
	this.getCompleteTransfer = function(attr) {
		completeTransferNodes = "<ConsultationCallId>"+attr.consultationCallId+"</ConsultationCallId>";
		completeTransferNodes += "<CallId>"+attr.callId+"</CallId>";
		return completeTransferNodes;
	};
	
	this.getPickup = function(attr) {
		pickupNodes = "<CallId>"+attr.callId+"</CallId>";
		pickupNodes += "<TerminalId>"+attr.terminalId+"</TerminalId>";
		pickupNodes += "<Destination>"+attr.destination+"</Destination>";
		return pickupNodes;
	};
	
	this.getStartRecording = function(attr) {
		startRecordingNodes = "<CallId>"+attr.callId+"</CallId>";
		startRecordingNodes += "<ToneOption>"+attr.toneOption+"</ToneOption>";
		return startRecordingNodes;
	};
	
	this.getStopRecording = function(attr) {
		stopRecordingNodes = "<CallId>"+attr.callId+"</CallId>";
		return stopRecordingNodes;
	};
	
	this.getSetPresence = function(attr) {
		setPresenceNodes = "<UserId>"+attr.userId+"</UserId>";
		setPresenceNodes += "<PresenceState>"+attr.presenceState+"</PresenceState>";
		setPresenceNodes += "<PresenceStateText>"+attr.presenceStateText+"</PresenceStateText>";
		return setPresenceNodes;
	};
	
	this.getHoldCall = function(attr) {
		holdCallNodes = "<CallId>"+attr.callId+"</CallId>";
		holdCallNodes += "<Action>"+attr.action+"</Action>";
		holdCallNodes += "<TerminalId>"+attr.terminalId+"</TerminalId>";
		return holdCallNodes;
	};
	
	this.getCustomMessage = function(attr) {
		customMessageNodes = "<SenderUserId>"+attr.senderUserId+"</SenderUserId>";
		if (attr.receiverUserId)
			customMessageNodes += "<ReceiverUserId>"+attr.receiverUserId+"</ReceiverUserId>";
		customMessageNodes += "<Category>"+attr.category+"</Category>";
		customMessageNodes += "<Message>"+attr.message+"</Message>";
		return customMessageNodes;
	};
}

function Categories() //as argument receive as much as categores as there are
{
	this.categories = [];

	for (var k = 0; k < arguments.length; k++) {
    this.categories.push({category:arguments[k], result:""});
  }
	
	this.add = function(catg, res) {
		if(res === undefined)
			res = "";
		this.categories.push({category:catg, result:res});
	}
}

function User(userId, catgs)
{
	this.id = userId;
	this.categories = catgs.categories;
}
